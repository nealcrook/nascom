#!/usr/bin/perl
#
# This script builds the boot menu/ROM images part of an SDcard image for
# use by the Special Boot ROM (SBROM) on NASCOM-NG (NASCOM4).
#
# Eventually SBR might understand FAT but for now deal with raw SDcard
# blocks; 512 bytes per block: the image must be put onto the SDcard
# using dd (unix) or rawrite (windows) or equivalent.
#
# The image looks like this:
#
# block
# 0-7     menu. This is just text, formatted for a 48-character screen.
#         It contains UNIX line endings and is 0-terminated. The space
#         reserved is bigger than a NASCOM screen in case I want to use
#         it for something additional later (or a menu on an 80-column
#         screen)
# 8-33    26 "profiles" Each profile can load one or more ROM images to
#         memory, perform memory and I/O writes, and should terminate by
#         passing control to the monitor or a loaded image.
# 34      first block of appended ROM images.
#
# This tool generates the image. In particular, it will:
#
# - pad the menu to the correct size
# - create the profiles from high-level descriptions here, in a way that
#   is immune to size/ordering changes of the ROM images
# - convert the ROM images from .NAS to binary format, pad them (if
#   necessary)
#
# This is not an interactive tool; all the work that it does is coded in
# this source file.
#
# https://github.com/nealcrook/nascom
# Neal Crook, September 2021.
# foofoobedoo@gmail.com
#
################################################################################

##[NAC HACK 2020Dec11] - Add profile that uses NAS-SYS3 in RAM

use warnings;
use strict;

# default name to use for the output image file
my $imgfname = "nascom4_sdcard.img";

if (defined $ARGV[0]) {
    $imgfname = $ARGV[0];
}


# point to NASCOM repository (relative path is OK)
my $nascom = "../..";
# use nascon to convert images to binary format if necessary.
my $nascon_exe = "$nascom/converters/nascon";
# name to use for temporary file
my $tempfname = "temp";
# number of blocks for menu
my $menu_blocks = 8;
# number of profiles, one block per profile
my $profile_blocks = 26;


################################################################################
# Data structure describing ROM images

my @roms;

#          name       load-addr location
add_image("NASBUGT2", 0x0000, "$nascom/ROM/nasbugt2/NASBUGT2.bin_golden");
add_image("NASBUGT4", 0x0000, "$nascom/ROM/nasbugt4/NASBUGT4.bin_golden");
add_image("BBUG",     0x0000, "$nascom/ROM/bbug/BBUG.bin_golden");
add_image("NASSYS1",  0x0000, "$nascom/ROM/nassys1/NASSYS1.bin_golden");
add_image("NASSYS3",  0x0000, "$nascom/ROM/nassys3/NASSYS3.bin_golden");
add_image("BASIC",    0xE000, "$nascom/ROM/basic/basic.nas");
add_image("ZEAP",     0xD000, "$nascom/ROM/zeap/zeap.nas");
add_image("NASPEN",   0xB800, "$nascom/ROM/naspen/naspen_b800.bin");
add_image("POLYDOS2", 0xD000, "$nascom/PolyDos/rom/PolyDos_2_Boot_ROM.bin");
add_image("POLYDOS2-SD", 0xD000, "$nascom/sdcard/host_programs/polydos_util_rom_d000.bin");
add_image("POLYDOS-LSD", 0xD000, "$nascom/nascom4/PolyDos/polydos_rom_d000.bin");
add_image("POLYDOS3", 0xD000, "$nascom/PolyDos/rom/PolyDos_3_Boot_ROM.bin");
add_image("PASCAL",   0xD000, "$nascom/ROM/pascal/bls_pascal2_d000.bin");
add_image("NASFORTH", 0x1000, "../../../nascom_other/NASFORTH.NAS");
add_image("NASDOS",   0xD000, "../../../nascom_other/nascom_nasdos/NASDOS/nasdos.rom");
add_image("NASDOS-SD",0xD000, "../../../nascom_other/nascom_nasdos/NASDOS/nasdos_sd.rom");
add_image("NASCPM",   0xF000, "../../../nascom_other/cpm_polydos/bootrom/cpmboot.go");
add_image("LOLLIPOP", 0x1000, "/home/crook/Arduino/VGANoFrameBufferNAS/data/lollipop.bin");
add_image("DISDEB",   0xC000, "$nascom/ROM/dis_debug/dis_debug.bin_golden");
add_image("INVADERS", 0x1000, "../../../nascom_other/Spaceii.nas");
add_image("MEMTEST",  0x0c80, "../../../nascom_other/map80memorytest/m80memtp.bin");
add_image("CPM-LSD",  0xc000, "$nascom/nascom4/cpm/map80vfc_rom/boot_code_standalone_sd.bin");
add_image("CGEN-NAS", 0xe000, "$nascom/ROM/chargen/nas_an_gra.nas");
add_image("CGEN-VFC", 0xe000, "$nascom/ROM/map80vfc/map80vfc_chargen_rom.bin");
add_image("CGEN-SARGON",0xe000, "$nascom/ROM/chargen/sargon.nas");
# drum machine
add_image("CGEN-MCS",  0xe000, "$nascom/ROM/mcs-ii/nas_an_mcs.nas");
add_image("MCS-MON",   0x0000, "$nascom/ROM/mcs-ii/MCS-II_MON_V3.bin_golden");
add_image("MCS-MIDI1", 0xc000, "$nascom/ROM/mcs-ii/MCS-II_MIDI_1.bin_golden");
add_image("MCS-MIDI2", 0xd000, "$nascom/ROM/mcs-ii/MCS-II_MIDI_2.bin_golden");

# calculate the start block for each image, given the overhead
set_block_offsets($menu_blocks + $profile_blocks);


################################################################################
# Data structure describing the menu

#    123456789012345678901234567890123456789012345678
my $menu =
    "A: T2  B: BBUG  C: T4  D: NAS-SYS1  E: NAS-SYS3\r" .
    "F: T4       + ZEAP + BASIC\r" .
    "G: NAS-SYS1 + ZEAP + BASIC\r" .
    "H: NAS-SYS3 + ZEAP + BASIC + DISDEBUG\r" .
    "I: NAS-SYS3 + BASIC + POLYDOS2  J: POLYDOS2-SD\r" .
    "K: NAS-SYS3 + BASIC + POLYDOS3  L: POLYDOS-LSD\r" .
    "M: NAS-SYS3 + BASIC + NASDOS    N: NASDOS-SD\r" .
    "O: NAS-SYS3 + PASCAL   P: NAS-SYS3 + NASFORTH\r" .
#    "Q: NASCOM CP/M\r" .
    "Q: MCS-II\r" .
    "R: MAP80 VFC CP/M      S: MAP80 VFC CP/M-LSD\r" .
    "T: NAS-SYS3 + LOLLIPOP        Reload char-gen:\r" .
    "U: NAS-SYS3 + INVADERS         X: NASCOM\r" .
    "V: NAS-SYS3 + NASPEN           Y: VFC\r" .
    "W: NAS-SYS3 + MEMORY TEST      Z: SARGON\r" ;

my $pad = $menu_blocks * 512 - length($menu);
if ($pad < 0) {
    die "ERROR menu is too big!";
}
$menu = $menu . (chr(0) x $pad);


################################################################################
# Data structures describing the profiles
# Specify the profile number (0-25) then a list of arguments. Arguments are:
# "W1234=5678" -- memory write: write to address 1234 with data 5678.
# "P12=56"     -- I/O write: write to port 12 with data 56.
# "G1000=40"   -- Go! write 40 to port 3 (memory remap) and jump to 1000
# "L:BBUG"     -- Load image. Converted to "I1234 L4000=8"
#                 which means Image at block 1234 is loaded to memory
#                 for 8 blocks.
#
# All numeric arguments are in HEX, with upper-case letters. Leading zeros can
# be omitted.
# Each argument is space-separated from the next.
# The final argument is space-terminated
# The remainder of the profile is filled with spaces.
# Expected that the "active" part of every profile ends with a G so there is no
# need to detect the end of the block. Anything after the G is ignored and
# can be, for example, text description of the profile.
#
# Values to write to port 0x18 as                  Values to write to port 0x19
# part of a G command:
# b7 0                                                b7 unused
# b6 enable chare gen in VFC space                    b6 protect E000-FFFF
# b5 MAP VFC autoboot                                 b5 protect D000-DFFF
# b4 enable WS RAM                                    b4 protect C000-CFFF
# b3 enable NAS-SYS3 ROM                              b3 protect B000-BFFF
# b2 enable special boot ROM                          b2 protect A000-AFFF
# b1 vRAM high (for NASCOM CP/M)                      b1 unused
# b0 enable nascom vRAM                               b0 protect 0000-7FFF
#
# 19 for normal stuff with internal NAS-SYS3 ROM
# 11 when loading another monitor program
# 03 for NASCOM CP/M
# 20 for MAP80 CP/M

my @profiles;

add_profile('A', "L:NASBUGT2",                                  "P19=01", "G0=11");
add_profile('B', "L:BBUG",                                      "P19=01", "G0=11");
add_profile('C', "L:NASBUGT4",                                  "P19=01", "G0=11");
add_profile('D', "L:NASSYS1",                                   "P19=01", "G0=11"); # NAS-SYS1 in RAM
add_profile('E', "L:NASSYS3",                                   "P19=01", "G0=11"); # NAS-SYS3 in RAM
add_profile('F', "L:NASBUGT4", "L:ZEAP", "L:BASIC",             "P19=61", "G0=11");
add_profile('G', "L:NASSYS1", "L:ZEAP",  "L:BASIC",             "P19=61", "G0=11");
add_profile('H',              "L:DISDEB", "L:ZEAP",  "L:BASIC", "P19=70", "G0=19");
add_profile('I',              "L:POLYDOS2", "L:BASIC",          "P19=60", "GD000=19");
add_profile('J',              "L:POLYDOS2-SD", "L:BASIC",       "P19=60", "GD000=19");
add_profile('K',              "L:POLYDOS3", "L:BASIC",          "P19=60", "GD000=19");
add_profile('L',              "L:POLYDOS-LSD", "L:BASIC",       "P19=60", "GD000=19");
add_profile('M',              "L:NASDOS",   "L:BASIC",          "P19=60", "GD000=19");
add_profile('N',              "L:NASDOS-SD","L:BASIC",          "P19=60", "GD000=19");
add_profile('O',                            "L:PASCAL",         "P19=60", "GD000=19");
add_profile('P',                            "L:NASFORTH",       "P19=00", "G1000=19");
#add_profile('Q', "L:NASCPM",                                              "GF000=3"); #[NAC HACK 2020Dec21] no protect
# Drum machine: char gen + ROMs
#add_profile('Q', "L:MCS-MON", "L:MCS-MIDI1", "L:MCS-MIDI2", "PEC=E1", "P18=5D", "L:CGEN-MCS", "PEC=0", "G0=11");
#add_profile('Q', "L:MCS-MON", "L:MCS-MIDI1", "L:MCS-MIDI2", "L:BASIC", "P19=01", "G0=11");
add_profile('Q', "PEC=E1", "P18=5D", "L:CGEN-MCS", "PEC=0", "L:MCS-MON", "L:MCS-MIDI1", "L:MCS-MIDI2", "L:BASIC", "P19=01", "G0=11");
add_profile('R',                                                "PEE=00", "G0=20");   # MAP80 CP/M  - switch video
add_profile('S', "L:CPM-LSD",                                   "PEE=00", "GC000=20");# MAP80 CP/M  - switch video, SDcard boot
add_profile('T',               "L:LOLLIPOP",                              "G1000=19");
add_profile('U',               "L:INVADERS",                              "G1000=19");
add_profile('V', "L:NASPEN",                                    "P19=08", "G0=19");
add_profile('W',               "L:MEMTEST",                               "G0=19"); # Load then start NAS-SYS
# Load chargen then restart SBROM, using 104F (MENU) as entry is nasty, but restarting
# from 1000 did not work for some reason.
add_profile('X', "PEC=E1", "P18=5D", "L:CGEN-NAS",   "PEC=0", "G104F=1D");
add_profile('Y', "PEC=E1", "P18=5D", "L:CGEN-VFC",   "PEC=0", "G104F=1D");
add_profile('Z', "PEC=E1", "P18=5D", "L:CGEN-SARGON","PEC=0", "G104F=1D");

################################################################################
# Generate the image

build_image();

################################################################################
# Tidy up

if (-e $tempfname) {
    unlink $tempfname;
}


################################################################################
################################################################################
# Subroutines


# add entry to %roms database
# $roms[n]->[0] = name
#           [1] = length in blocks
#           [2] = load address
#           [3] = block offset
#           [4] = binary (padded to xple of 512)

sub add_image {
    my $name = $_[0];
    my $org = $_[1];
    my $file = $_[2];

    if (($file =~ /\.[Bb][Ii][Nn]$/) or
        ($file =~ /\.[Rr][Oo][Mm]$/) or
        ($file =~ /\.[Gg][Oo]$/) or
        ($file =~ /\.bin_golden$/)
        ) {
        # binary file; open as-is
    }
    elsif ($file =~ /\.[Nn][Aa][Ss]$/) {
        # .NAS file. Convert to binary
        print "INFO convert $file to binary..\n";
        system("$nascon_exe $file $tempfname -out bin");
        $file = $tempfname;
    }
    else {
        die "ERROR file format of $file is not recognised";
    }

    my $data;
    open BINFILE, $file or die "ERROR cannot open $file";
    my $size = read BINFILE, $data, 1024 * 64 + 1;
    close BINFILE;

    if ($size == 1024 * 64 + 1) {
        die "ERROR file is bigger than 64Kbytes. That's bigger than the memory";
    }

    my $runt = $size % 512;
    my $blocks = int($size / 512);
    if ($runt != 0) {
        $data = $data . (chr(0) x (512 - $runt));
        $blocks++;
    }

    # 0 is the offset; populated later
    my @stuff = ($name, $blocks, $org, 0, $data);
    push @roms, \@stuff;
}


# $overhead is the first block number used by the ROM images
# update $roms[n]->[3] for each entry.
sub set_block_offsets {
    my $start = $_[0];

    foreach my $ref (@roms) {
        $ref->[3] = $start;
        $start = $start + $ref->[1];
    }
}


sub add_profile {
    my $profile = shift @_;
    my $data = "";
    my $error = 0;

    my $profile_num = ord($profile) - ord('A');
    if (($profile_num < 0) or ($profile_num > 25)) {
        print "ERROR: profile $profile_num not supported: must be A-Z\n";
        $error++;
    }

    foreach my $arg (@_) {
        if ($arg =~ /^W[0-9A-F]{1,4}\=[0-9A-F]{1,4}$/) {
            # perfect.
            $data = $data . $arg . " ";
        }
        elsif ($arg =~ /^P[0-9A-F]{1,2}\=[0-9A-F]{1,2}$/) {
            # perfect.
            $data = $data . $arg . " ";
        }
        elsif ($arg =~ /^G[0-9A-F]{1,4}\=[0-9A-F]{1,2}$/) {
            # perfect.
            $data = $data . $arg . " ";
        }
        elsif ($arg =~ /^L:([A-Z\-0-9]+)$/) {
            my $name = $1;
            my $found = 0;
            foreach my $ref (@roms) {
                if ($name eq $ref->[0]) {
                    $data = $data . sprintf("I%X L%X=%X ", $ref->[3], $ref->[2], $ref->[1]);
                    $found = 1;
                    last;
                }
            }
            if ($found == 0) {
                print "ERROR image $name is not found\n";
                $error++;
            }
        }
        else {
            print "ERROR: argument $arg is not recognised or is formatted incorrectly\n";
            $error++;
        }
    }
    die "ERROR fix those errors and rerun" if $error != 0;

    print "INFO profile $profile as $data\n";

    # Parsing code expects each profile to end with a space so space-fill
    # the command strings
    my $pad = 512 - length($data);
    if ($pad < 0) {
        die "ERROR profile $profile is too long!";
    }
    $data = $data . (' ' x $pad);
    $profiles[$profile_num] = $data;
}


sub build_image {
    open OUT, ">$imgfname" or die "ERROR could not open $imgfname";

    print OUT $menu;

    my $empty = ' ' x 512;
    foreach my $i (0..$profile_blocks - 1) {
        if (exists $profiles[$i]) {
            printf "INFO add profile %s\n", chr($i + ord 'A');
            print OUT $profiles[$i];
        }
        else {
            print OUT $empty;
        }
    }
    foreach my $ref (@roms) {
        print "INFO add binary $ref->[0] ($ref->[1] blocks)\n";
        print OUT $ref->[4];
    }
    close OUT;
    print "INFO created image $imgfname\n";
}
